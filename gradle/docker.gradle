apply from: 'gradle/project-ext.gradle'

class DockerCompose extends DefaultTask {

    List<?> dockerComposeArguments
    Map<String, ?> dockerComposeEnvironment

    DockerCompose() {
        _setEnvironment()
        _setDefaultAgruments()
    }

    private void _setEnvironment() {

        dockerComposeEnvironment = [
            'LIFERAY_BUNDLE_DIR': project.bundleDirPath,
            'PROJECT_DIR': project.projectDir.toString()
        ]
    }

    private void _setDefaultAgruments() {

        dockerComposeArguments = [
                '-p', project.dockerContainerPrefix,
                '-f', project.dockerComposeFilePath
        ]
    }

    public void args(Iterable<?> args) {

        args.each{ arg -> dockerComposeArguments.add(arg) }
    }

    public void args(Object... args) {

        args.each{ arg -> dockerComposeArguments.add(arg) }
    }

    @TaskAction
    public void dockerCompose() {

        project.exec {
            executable project.dockerComposeExecutable
            args dockerComposeArguments
            environment dockerComposeEnvironment
        }
    }
}

task startDockerEnv(
    description: 'Inits docker project environment.',
    group: 'docker',
    type: DockerCompose
) {
    args('up', '-d')
}

task stopDockerEnv(
    description: 'Shuts down docker project environment.',
    group: 'docker',
    type: DockerCompose
) {
    args('down')
}

task cleanProject(
    description: 'Deletes all modules and wars from project',
    group: 'docker',
    type: Exec
) {
    doLast {
        delete fileTree(dir: "${project.bundleDirPath}/deploy", include: '**.war')
        delete fileTree(dir: "${project.bundleDirPath}/osgi/modules", include: '**.jar')
        delete fileTree(dir: "${project.bundleDirPath}/osgi/war", include: '**.war')
    }

    commandLine "echo", "Emptied ${project.bundleDirPath}/osgi/modules" +
            "\nEmptied ${project.bundleDirPath}/osgi/wars" +
            "\nEmptied ${project.bundleDirPath}/deploy"
}
